{"version":3,"file":"growthbook.js","names":[],"sources":["../../../src/types/growthbook.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { GrowthBook } from \"..\";\nimport { ConditionInterface } from \"./mongrule\";\n\ndeclare global {\n  interface Window {\n    _growthbook?: GrowthBook;\n  }\n}\n\nexport type FeatureRule<T = any> = {\n  id?: string;\n  condition?: ConditionInterface;\n  force?: T;\n  variations?: T[];\n  weights?: number[];\n  key?: string;\n  hashAttribute?: string;\n  coverage?: number;\n  namespace?: [string, number, number];\n};\n\nexport interface FeatureDefinition<T = any> {\n  defaultValue?: T;\n  rules?: FeatureRule<T>[];\n}\n\nexport type FeatureResultSource =\n  | \"unknownFeature\"\n  | \"defaultValue\"\n  | \"force\"\n  | \"override\"\n  | \"experiment\";\n\nexport interface FeatureResult<T = any> {\n  value: T | null;\n  source: FeatureResultSource;\n  on: boolean;\n  off: boolean;\n  ruleId: string;\n  experiment?: Experiment<T>;\n  experimentResult?: Result<T>;\n}\n\nexport type ExperimentStatus = \"draft\" | \"running\" | \"stopped\";\n\nexport type Experiment<T> = {\n  key: string;\n  variations: [T, T, ...T[]];\n  weights?: number[];\n  condition?: ConditionInterface;\n  coverage?: number;\n  include?: () => boolean;\n  namespace?: [string, number, number];\n  force?: number;\n  hashAttribute?: string;\n  active?: boolean;\n  /* @deprecated */\n  status?: ExperimentStatus;\n  /* @deprecated */\n  url?: RegExp;\n  /* @deprecated */\n  groups?: string[];\n};\n\nexport type ExperimentOverride = {\n  condition?: ConditionInterface;\n  weights?: number[];\n  active?: boolean;\n  status?: ExperimentStatus;\n  force?: number;\n  coverage?: number;\n  groups?: string[];\n  namespace?: [string, number, number];\n  url?: RegExp | string;\n};\n\nexport interface Result<T> {\n  value: T;\n  variationId: number;\n  inExperiment: boolean;\n  hashUsed?: boolean;\n  hashAttribute: string;\n  hashValue: string;\n  featureId: string | null;\n}\n\nexport type Attributes = Record<string, any>;\n\nexport type RealtimeUsageData = {\n  key: string;\n  on: boolean;\n};\n\nexport interface Context {\n  enabled?: boolean;\n  attributes?: Attributes;\n  url?: string;\n  features?: Record<string, FeatureDefinition>;\n  forcedVariations?: Record<string, number>;\n  log?: (msg: string, ctx: any) => void;\n  qaMode?: boolean;\n  enableDevMode?: boolean;\n  /* @deprecated */\n  disableDevTools?: boolean;\n  trackingCallback?: (experiment: Experiment<any>, result: Result<any>) => void;\n  onFeatureUsage?: (key: string, result: FeatureResult<any>) => void;\n  realtimeKey?: string;\n  realtimeInterval?: number;\n  /* @deprecated */\n  user?: {\n    id?: string;\n    anonId?: string;\n    [key: string]: string | undefined;\n  };\n  /* @deprecated */\n  overrides?: Record<string, ExperimentOverride>;\n  /* @deprecated */\n  groups?: Record<string, boolean>;\n  apiHost?: string;\n  clientKey?: string;\n  decryptionKey?: string;\n}\n\nexport type SubscriptionFunction = (\n  experiment: Experiment<any>,\n  result: Result<any>\n) => void;\n\nexport type VariationRange = [number, number];\n\nexport type JSONValue =\n  | null\n  | number\n  | string\n  | boolean\n  | Array<JSONValue>\n  | { [key: string]: JSONValue };\n\nexport type WidenPrimitives<T> = T extends string\n  ? string\n  : T extends number\n  ? number\n  : T extends boolean\n  ? boolean\n  : T;\n\nexport type FeatureDefinitions = Record<string, FeatureDefinition>;\n\nexport type FeatureApiResponse = {\n  features?: FeatureDefinitions;\n  dateUpdated?: string;\n  encryptedFeatures?: string;\n};\n\n// Polyfills required for non-standard browser environments (ReactNative, Node, etc.)\n// These are typed as `any` since polyfills like `node-fetch` are not 100% compatible with native types\nexport type Polyfills = {\n  // eslint-disable-next-line\n  fetch: any;\n  // eslint-disable-next-line\n  SubtleCrypto: any;\n  // eslint-disable-next-line\n  EventSource: any;\n  localStorage?: LocalStorageCompat;\n};\n\nexport interface LocalStorageCompat {\n  getItem(key: string): string | null | Promise<string | null>;\n  setItem(key: string, value: string): void | Promise<void>;\n}\n\nexport type CacheSettings = {\n  backgroundSync: boolean;\n  cacheKey: string;\n  staleTTL: number;\n};\n\nexport type ApiHost = string;\nexport type ClientKey = string;\nexport type RepositoryKey = `${ApiHost}||${ClientKey}`;\n\nexport type LoadFeaturesOptions = {\n  autoRefresh?: boolean;\n  timeout?: number;\n  skipCache?: boolean;\n};\n\nexport type RefreshFeaturesOptions = {\n  timeout?: number;\n  skipCache?: boolean;\n};\n"],"mappings":""}